;;  Copyright ARM Ltd 2005-2008. All rights reserved.
;;  Scatter file for Cortex-M3
;#include "board.h"

;total ROM including ROM for bootload 0x00010000 64k
; CODE_SRAM   0x28000  160K
; total DATA SRAM   0x18000 96K

; ROM/Code SRAM image:
; ROM part:
;    0x00000000-0x00001FFF     Bootloader
;    0x00002000-0x0000FFFF     FW ROM RO-CODE/DATA
; CODE_SRAM part:
;    0x00010000-0x000100FF     unused
;    0x00010100-0x000101FF     FW interrupt vector table 
;    0x00010200-0x0003FFFF     FW CODE SRAM RO-CODE/DATA(including 32KB for customer)
; DATA_SRAM part:
;    0x00080000-0x000807FF     FW ROM hook function table, 2K
;    0x00080800-0x00081FFF     FW ROM_CODE RW/ZI data
;    0x00082000-0x00098000     FW SRAM_CODE RW/ZI data

LOAD_REGION_0 0x0002000 0x0000E000  {    ; load region size_region
    ; never change fwROM after ROM is defined
    fwROM  0x0002000 FIXED 0x0000E000   {  ; load address = execution address
        os_core.o(+RO)
        os_flag.o(+RO)
        os_mem.o(+RO)
        os_mutex.o(+RO)
        os_q.o(+RO)
        os_sem.o(+RO)
        os_task.o(+RO)
        os_time.o(+RO)
        os_tmr.o(+RO)
        os_mbox.o(+RO)
        ;os_dbg.o(+RO)
        ;begin for LWIP
        etharp.o(+RO)             
        def.o(+RO)                
        dhcp.o(+RO)               
        dns.o(+RO)                
        lwip_init.o(+RO)          
        mem.o(+RO)                
        memp.o(+RO)               
        netif.o(+RO)              
        pbuf.o(+RO)               
        raw.o(+RO)                
        stats.o(+RO)              
        sys.o(+RO)                
        tcp.o(+RO)                
        tcp_in.o(+RO)             
        tcp_out.o(+RO)            
        timers.o(+RO)             
        udp.o(+RO)                
        autoip.o(+RO)             
        icmp.o(+RO)               
        igmp.o(+RO)               
        inet.o(+RO)               
        inet_chksum.o(+RO)        
        ip.o(+RO)                 
        ip_addr.o(+RO)            
        ip_frag.o(+RO)            
        api_lib.o(+RO)            
        api_msg.o(+RO)            
        err.o(+RO)                
        netbuf.o(+RO)             
        netdb.o(+RO)              
        netifapi.o(+RO)           
        sockets.o(+RO)            
        tcpip.o(+RO)                  
        ;end for LWIP
        ;begin for c lib functions
        ;end for c lib functions
    }
}

; 0x10100-0x40000 for download SRAM FW(including 32KB for customer), interrupt vector locate in 0x10100
LOAD_REGION_1 0x00010100 0x0004FF00  {    ; load region size_region
    
    fwCodeSRAM   0x00010100 0x0004FF00  {  ; load address = execution address
        *.o (RESET, +First)    ; interrupt vector table, do not change it
        *(InRoot$$Sections)
        .ANY (+RO)
    }

; 0x000080000-0x000080800 reserved for ROM hook function table
    
    ; never change ROM_VARS after ROM is defined
    ROM_VARS  0x00080800 ABSOLUTE 0x0000A000  { 
        ;os_*.o(+RW +ZI)
        os_core.o(+RW +ZI)
        os_flag.o(+RW +ZI)
        os_mem.o(+RW +ZI)
        os_mutex.o(+RW +ZI)
        os_q.o(+RW +ZI)
        os_sem.o(+RW +ZI)
        os_task.o(+RW +ZI)
        os_time.o(+RW +ZI)
        os_tmr.o(+RW +ZI)
        os_mbox.o(+RW +ZI)
        ;os_dbg.o(+RW +ZI)
        ;begin for LWIP
        etharp.o(+RW +ZI)             
        def.o(+RW +ZI)                
        dhcp.o(+RW +ZI)               
        dns.o(+RW +ZI)                
        lwip_init.o(+RW +ZI)          
        mem.o(+RW +ZI)                
        memp.o(+RW +ZI)               
        netif.o(+RW +ZI)              
        pbuf.o(+RW +ZI)               
        raw.o(+RW +ZI)                
        stats.o(+RW +ZI)              
        sys.o(+RW +ZI)                
        tcp.o(+RW +ZI)                
        tcp_in.o(+RW +ZI)             
        tcp_out.o(+RW +ZI)            
        timers.o(+RW +ZI)             
        udp.o(+RW +ZI)                
        autoip.o(+RW +ZI)             
        icmp.o(+RW +ZI)               
        igmp.o(+RW +ZI)               
        inet.o(+RW +ZI)               
        inet_chksum.o(+RW +ZI)        
        ip.o(+RW +ZI)                 
        ip_addr.o(+RW +ZI)            
        ip_frag.o(+RW +ZI)            
        api_lib.o(+RW +ZI)            
        api_msg.o(+RW +ZI)            
        err.o(+RW +ZI)                
        netbuf.o(+RW +ZI)             
        netdb.o(+RW +ZI)              
        netifapi.o(+RW +ZI)           
        sockets.o(+RW +ZI)            
        tcpip.o(+RW +ZI)                  
        ;end for LWIP       
        ;begin for c lib functions
        ;end for c lib functions         
    }

    DATA_SRAM  0x0008A800 0x0000D800  { 
         main.o(main_only_cpu_access_mem)
         mac_mng_main.o(mac_only_cpu_access_mem)
         mac_mng_main.o(cell_mem_pool)
         ;printf_main.o(printf_only_cpu_access_mem)
         .ANY (+RW +ZI)
    }

    PING_BUF_SRAM 0x20000000 0x18000  ; BUF_SRAM0
    {
        mac_mng_main.o(ping_mem_pool)
        .ANY (+RW +ZI)
    }

    PONG_BUF_SRAM 0x20040000 0x10000  ; BUF_SRAM1
    {
        mac_mng_main.o(pong_mem_pool)
        .ANY (+RW +ZI)
    }

}




